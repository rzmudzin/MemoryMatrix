from __future__ import annotationsfrom openpyxl import Workbookimport sysimport osimport csvimport jsonimport pathlibimport datetimeimport timeimport http.clientimport itertools import pandas as pdimport csvimport argparseimport tempfileimport zipfilefrom typing import Callablefrom collections import OrderedDict, defaultdictfrom itertools import chainfrom itertools import groupbyfrom json import JSONEncoderfrom collections import namedtuplefrom tkinter import messageboxfrom pathlib import Pathfrom time import mktimeimport statisticsimport mathimport numpy as npimport subprocessfrom array import arraydef warningAction(file: str, text: str):        print(text)        subprocess.call(["echo", "::warning file=" + file + "::" + text])        # echo "::warning file=app.js,line=1,col=5,endColumn=7::Missing semicolon"def errorAction(file: str, text: str):    print(text)    subprocess.call(["echo", "::error file=" + file + "::" + text])class Asset:    name: str    renditionName: str    sizeOnDisk: int    def __init__(self, name: str, rendition_name: str, size_on_disk: int) -> None:        self.name = name        self.renditionName = rendition_name        self.sizeOnDisk = size_on_disk         class SizeRestriction:    def __init__(self, file_extension: str, max_size: int, action: str):        self.fileExtension = file_extension        self.maxSize = max_size        self.action = action                  class SizeCheckConfig:    def __init__(self):        self.path: str = ''        self.sizeRestrictions: [SizeRestriction] = []        self.exitCodeOnError = 0        self.statusFunc: Callable[[str], None] = lambda strValue: None       def isDebug():    if sys.gettrace():        return True    return Falsedef mainFunc(sizeGuardConfig: SizeCheckConfig):    config = sizeGuardConfig    if config == None:        return            hasSizeErrors = False            result = subprocess.run(['xcrun', '--sdk', 'iphoneos','assetutil', '--info', config.path], stdout=subprocess.PIPE)    assetJsonData: str = result.stdout.decode('utf-8')    decodedData = json.loads(assetJsonData)        print("\nProcessing: " + config.path)    assets: [Asset] = []    for data in decodedData:        if "SizeOnDisk" in data and "Name" in data:            sizeOnDisk = int(data["SizeOnDisk"])            name = data["Name"]            renditionName = ""            if "RenditionName" in data:                renditionName = data["RenditionName"]            else:                renditionName = name            assets.append(Asset(name, renditionName, sizeOnDisk))    print("Checking " + str(len(assets)) + " Assets")            for restriction in config.sizeRestrictions:        largeFiles = [ i for i in assets if i.sizeOnDisk >= restriction.maxSize and i.renditionName.endswith(restriction.fileExtension)]        print(str(len(largeFiles)) + " files of type " +  restriction.fileExtension + " are large files")        for largeFile in largeFiles:            msgText = "File " + largeFile.renditionName + " size of " + str(largeFile.sizeOnDisk) + " bytes exceeds threshold of " + str(restriction.maxSize) + " in " + config.path            if restriction.action == "warn":                warningAction(largeFile.renditionName, msgText)            elif restriction.action == "error":                errorAction(largeFile.renditionName, msgText)                hasSizeErrors = True                                          print("Processing Completed\n")    if hasSizeErrors and config.exitCodeOnError != 0:        print("Has size errors, exiting with code " + str(config.exitCodeOnError))        exit(config.exitCodeOnError)  if __name__ == '__main__':    config = SizeCheckConfig()        if isDebug() == False:        parser = argparse.ArgumentParser()        # parser.add_argument('filename')         parser.add_argument("--cpath", help="Path to evaluate")        parser.add_argument("--err_exit_code", help="Exit code to raise when an error is encountered")        parser.add_argument('--restriction', action='append', nargs='+')        args = parser.parse_args()                config.path = args.cpath        if args.err_exit_code != None:            config.exitCodeOnError = int(args.err_exit_code)        if args.restriction != None:            for arg in args.restriction:                restrictionValues=arg[0].split(":")                if len(restrictionValues) == 2:                    config.sizeRestrictions.append(SizeRestriction(restrictionValues[0], int(restrictionValues[1]), "warn"))                elif len(restrictionValues) == 3:                    config.sizeRestrictions.append(SizeRestriction(restrictionValues[0], int(restrictionValues[1]), restrictionValues[2]))                    else:        config.path = "/Users/rzmudzinski/Payload2/Marriott-TST.app/Theme_Theme.bundle/Assets.car"        config.sizeRestrictions.append(SizeRestriction("png", 5000, "warn"))        config.sizeRestrictions.append(SizeRestriction("pdf", 100000, "error"))    mainFunc(config)    